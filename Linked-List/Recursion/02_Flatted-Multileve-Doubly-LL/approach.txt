The Question gives a linked list which also contains child linked list like this

1<->2<->3<->4<->5       and you have to flatten it like this
        |
        6<->7<->8      1<->2<->3<->6<->7<->9<->10<->8<->4<->5
            |
            9<->10  

first we set the starting node to head, then we run a loop to see which node has a child, if a node has child (3) then we recurse the function and keep doing it until we reach the last child (9<->10), now when we reach the last child, we return the last chlid nodes which now point next to the previous parent's node (6<->7<->9<->10) now that parent has the child nodes flattened, we previously stored the node (8) which come after the node which point to a child so what we do is first set the flattened child to this parent and also make prev connection and make child ptr null, then we travel the returned child node (in 6<->7<->9<->10 we reach 10) and then join the next node(8) to this child, making both next and prev connections (6<->7<->9<->10<->8), now we again point to the node just after the node (9) which had child which is now next to the flattened child, now we return the head of this nested child and keep returning the nested heads until we reach the first node (3), and then whole list is flattened. The base case of this recursive function is the else block when no child node found.

Time Complexity = O(N) since we traverse whole list only once