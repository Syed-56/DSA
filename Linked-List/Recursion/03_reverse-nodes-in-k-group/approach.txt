The Q asks to reverse nodes of list in a group of given number k
if List is 1->2->3->4->5 and k is 2 then list is 2->1->4->3->5.
if k is 3 then 3->2->1->4->5,    if k is 4 then 4->3->2->1->5.  if k > sizeof(list) then output unchanged

You first make count=0 then run a loop while count != k and if it is equal then we recursively call again and keep finding k nodes until we dont, if we dont we return the head from last recursion call in which we didnt find nodes. Consider k=2.
Given list is 1->2->3->4->5. We are at node 0 (head), we run loop and reach 3rd node means for k=2 there is 1->2 then we call function again and go from node 3 (head) to node 5 means there are nodes for k=2 to again then we go from node 5(head) to next node but its null means there are no mode nodes for k=2 so base case, we return the hea in this call stack which is node 5. Now for previous call stack we got the value of prevNode = node 5 so what we will do now is reverse the nodes in these call stack, the nodes for head in this call stack are 3->4->5, we have to make it 4->3->5. And we also have node 5 seperately.

Now you store the head of this call stack (3) in a node tempHead and run a loop k times so we reverse all k nodes, in the loop we store the next node(4) so we dont break connection, then we point the tempHead to the prevNode(5) which we got from recursion so now we get 3->5. now for next iteration we have to connect node(4) to node(3) so what we do is make the node(3) our prevNode and make the temp head our next node which we stored as 4, so since 3 was attached to 5, 4 will be attached to 3->5. now the next node will point to null since there's nothing after 4 and 3->5 will become 4->3->5. now our prevNode point to 4 so we return prevNode from this call stack, now in the stack where head was 1->2, the prevNode value will be 4->3->5. Here we will do this again, store 1 in our tempHead and store the next value of this head, connect this tempHead to prev node to make 1->4->3->5 which is now our prevNode and tempHead is now our next node (2), and our temp->next point to 2 whose next is null so nothing stored in next node, this time the tempHead(2) is connected to (1->4->3->5) to achieve 2->1->4->3->5. Since this was our first call stack so this node is our answer