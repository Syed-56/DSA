Brute Force:-
    Do 3 nested loops to find 3 items of pair but we also insert the found pair in set so that if a new pair is found it dont contain any element from previous pairs. Then return the grid of pairs. 
    Time Complexity = O(n^3 * log(m)) and Space Complexity = O(2n)

Better Approach (Hashing):-
    In 2 sum problem we had a target and needed to pairs so it was like a+b=target, and in this Q we need to find 3 pairs which sum to 0 which means a+b+c=0 => a+b=-c. So we can say it is like 2 sum problem where target value is -c. So if we set nums[i]=a and in nested loop we can set nums[j]=b and we will set -c=a+b => c=-(a+b) and then when we get value of c we can check if this value exist in the set which contains value from arrays. if yes then we found our pair of triplets, else we didn't. Also we use a set first and then put its values in 2d vector bcz set filters out duplicate values.
    Time Complexity = O(n^2 * log(m)) and Space Complexity = O(n+m)

Optimized (Two Pointer)
    We need triplets so what we will do is first we will sort the array now we will iteratoe over array like this:
    our first value will be the i'th value of array and other two will be the extreme ends after the i'th value and now we will do the two pointer thingy. Our sum should be 0, if sum < 0 then increase small value and if sum > 0 decrease large value so the two values are changing and third value i'th value. now if we find a pair we will store it else not, then the i'th value will be increased and we will do the same two pointer thing again. Also in sorted data duplicate values will be together and duplicate values are not needed so we will do the condition of if (nums[i]==nums[i-1]) continue. and inside while loop if nums[j]==nums[j-1] then also continue;
    Time Complexity = O(nlogn + n^2) and Space Complexity = O(n)