Brute Force:-
The Q says that each row of matrix is sorted and the first element of next row is larger than the last element of previous row.
So we can iterate over first element of each row and the moment first element become greater then target, we store the index of previous row. This will take single loop. But doing this we can't get the row index if target is in last row so if our loop ends witout finding row index then we will set row index as last row, assuming possibility that element exist in last row.
Now the index of row we got we will search linearly and get the element if it exist.
IF element not found return false else return true.

Optimzie:-
We do binary search on 2D array, start is 0 and end is (rows*cols)-1 because thats the number of elements (for 3x3 dimension: 3*3-1 = 9-1=8). Now in binary search we do mid=high+low/2 but for 2D array we have to find row anc col index so we use mid to find it.
Row = mid/cols and col = mid%cols this gives you the "mid" u r looking for in matrix.
Now if matrix[row][col] > target u do start=mid+1 else end=mid-1 ang again calculate mid row column until mid==target.