We also divide the array in halfs until we reach the end.
                  quickSort(0,5)
                    pivot = 2
                     /       \
       quickSort(0,0)       quickSort(2,5)
        (1 element)          pivot = 7
                             /        \
              quickSort(2,3)         quickSort(5,5)
               pivot = 3              (1 element)
                /     \
  quickSort(2,1)     quickSort(3,3)
     (empty)          (1 element)

Original array: [4, 7, 1, 3, 9, 2]
first our pivot element is 2 so we start at 4 and compare with 2 but its big so we leave and then we reach 1 and comapre with 2 since its big so we swap element at current element at the position we had to insert. basically the position to insert first was -1 but when we find element smaller than pivot, we increment the inserting index and swap with the position at which element is found. so 4 and 1 are swapped to give [1,7,4,3,9,2]. Now when we completely traverse array we swap the pivot element with element at inserting position which is is 7 so now we get [1,2,4,3,9,7]. Then we return pivot index as 2 (at 4)
now we take [1,2] but no sorting needed then we take [3,9,7] which is sorte into [3,7,9]
Now we take [4,3] ans sort them to get [3,4] and our final array looks like [1,2,3,4,7,9]