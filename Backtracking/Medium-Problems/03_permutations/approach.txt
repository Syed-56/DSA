Given array = [1,2,3]
All Permutations = [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

First we initialize an answer array which will store current permutation.
To find permutations, we will choose 3 paths.
Path 1: first digit is 1, store remaining elements, we get 1st permutation (123), swap those elements, we get 2nd permutation. (132)
Path 2: first digit is 2, store remaining elements, we get 3rd permutation (213), swap those elements, we get 4th permutation. (231)
Path 3: first digit is 3, store remaining elements, we get 5th permutation (312), swap those elements, we get 6th permutation. (321)

Since the array had 3 elements, we got 3!=6 permutations by travelling 3 main paths and 2 sub paths in each.

                                                   Permutations
                                                /        |       \ 
                                                1        2        3
                                               / \      / \      / \
                                             123 132  213 231   312 321
If we had a 4 size array
Then there would've been 4 primary paths with eacch digit being first.
Then they would have 3 sub paths for remaining 3 digits to be 2nd element.
Then those 3 sub paths would've 2 sub paths for remaining 2 digits.
This wil make 4x3x2 = 4! = 24 Permutations

Backtracking:-
First we will choose our first digit in each call. How? We will swap first element with every element recursively. We will be tracking 2 things. Our current index and call. In the beginning we are at index=0 and call stack 0. The index is set as the same as of call stack. Then we do the swapping but it does nothing but we do it for the sake of finding all paths. Then we recursively call the function again and now we are at call stack 1 so we do swap nums[0] and nums[callStack] so in this call stack our first digit changes from 1 to 2. Then we recursively call again and swap first and 3rd element so now first digit is 3. Since our call stack is at the same depth as of size of array so we return.
But in our logic. What we do is set the index of the element as our current call stack so in these first 3 calls. Nothing is being changed, we do swap(1,1) swap(2,2) swap(3,3). Then we store the permutation in base case which is 123.

Now what we do is while we "backtrack" since we are updating the given array so avoid any misfortunes, we reset the array as it was by swapping the elements back. Since we back track 3 calls. In call 2 we swap(2,2) and return. Then when we swap(1,1). we recursively call function again to swap(2,3) so now we get permutatio 132. Now we go again in call 3 so we return by storing this permutation.

What happens is we run a loop from the current call stack to the size of array. So when we go back in call stack 1, we run another iteration where call stack is 1 but index become 2 so elements at nums[1] and nums[2] are swapped giving is 132.
So thats how the recursive tree is formed. Now when we back track to the call where to primary call. Another iteration runs by giving 2 as our first digit and then we make a call again for swapping. This swapping gives 213 and then we backtrack and now replace last 2 which give us 231. Now we backtrack again by reseting array to 123, swap 3 and 1 give 312. Make recursive calls to store it. Backtrack and swap to make 321 and then store it. Now that our index==n and we are in primary call. Our program is finished.