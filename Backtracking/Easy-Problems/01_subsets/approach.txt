First of all the reason we made 2 functions is because the given function on leetcode accept only 1 parameter but we had to customize our parameters w.r.t backtracking process so we made a different function, wrote our logic there and then returned answer from actual function. The second function modifies the passed ans grid.

Backtracking:-
    We start with 0 subsets then what we do is push current element from array in our first subset and then call function again and insert another element and repeat this until we insert all elements then we hit the base case, this way our first subset is the array with all elements, then we go in previous call stack and remove the element and call our function again, now we again reach base case so we stored 2 subsets, one with all elements and one with all elements except last, we repeat this process like this until we store all possible combinations.

                                                     ---------answer = []----------
                                                    /                              \
                                                    1                              []
                                            /              \                 /             \
                                           1,2              1               2              []
                                        /       \       /       \       /       \       /      \  
                                      1,2,3    1,2     1,3      1      2,3      2      3            [] 

whats happening here is look, when we first call that function the answer is empty, then we push back 1 in the answer and call again then push back 2 then call again then push back 3 now our base case is when we reach 3 calls we store the subset and return from the call stack. Now we back track in our previous call and pop back last added element to make it 1,2 and this time we call function again without pushing back element so 1,2 is stored and then we go back in previous call and now function ended, so we go back in 1st call, now again we pop back the lat element added and call function again, now we are in 2nd call so we add element at index 2 so now we get 1,3 and then we return again and pop back last added element and now only 1 is stored in the last call which we also store. Now we go in the primary call and we have 4 subsets in our answer. This time we pop back the 1 which we added and call function again, push back the current element and then call again and again pushback, now we have 2,3 so we store it and go back in previous call and pop the last added 3 and now call function again without adding 3 so another subset we got is 2, now go again in 1st call stack and now pop back current element and call function again, here we push back the current element, call function again and store it, then we come back again, pop back the last added element and call function again to store it. Now we store 3 and the empty row. Now this call stack is also completed so we go in primary call again and now no code remains so we return to the original function       