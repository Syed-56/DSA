we know 1th and 2nd fibonacci terms are 0 and 1. so for 6th fibonacci term we have to find previous fibonacci terms since we know fibo(6) = fibo(5) + fibo(4) but we dont know these 2 so for fibo(5) we do fibo(4)+fibo(3) and for fibo(4) we do fibo(3) + fibo(2) and we keep going.

going deep down in call stack           backtrack up the stack
fibo(6) = fibo(5) + fibo(4)              fibo(6) = 5+3 = 8
fibo(5) = fibo(4) + fibo(3)              fibo(5) = 3+2 = 5
fibo(4) = fibo(3) + fibo(2)              fibo(4) = 2+1 = 3
fibo(3) = fibo(2) + fibo(1)              fibo(3) = 1+1 = 2
fibo(2) = fibo(1) + fibo(0)      =>      fibo(2) = 1+0 = 1

So the 6th fibonacci number is 8
you see there are in each call there are (2^call num) calls like in fibo(6) we call fibo(5) and fibo(4) so in call 1 we make 1x2 call. In call 2 we are calling fibo(5) and fibo(4) which call [fibo(4) and fibo(3)] and [fibo(3) and fibo(2)] so in call 2 we make 2x2 so you no in call 3 we will make 4x2=8 calls so you see in each call the call stack is increasing exponentially so Time Complexity = O(2^n)
This is a very bad time complexity and can be reduced to O(n) using DP but we solved it to understand recursion